1. 函数的参数
	1）默认参数
		默认参数的使用可以简化函数调用，如将最常用的参数设为默认参数。
		注意，默认参数必须指向不变对象，如：
		def add_end(L=[]):
			L.append('END')
			return L
		如果反复直接调用add_end,则列表会保留上一次结果，不断加end，因此正确写法为：
		def add_end(L=None):
			if L is None:
				L = []
		L.append('END')
		return L
		
	2）可变参数
		适用于参数个数未知且不定的情况，如计算任意个数的平方和，写法为 *variable_name
		这样输入的数据会以元组的形式传入，同样，如果要传列表或元组进去，也加 * 即可
		
	3）关键字参数
		关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict
		调用时，直接以字典形式进行构造，说明其key-value
        e.g.
		def person(name, age, **kw):
			print('name:', name, 'age:', age, 'other:', kw)
		
		person('Mike', 30, job='teacher')
	
	4）命名关键字参数
		通过命名的方式限制允许输入的关键字参数，如：
		def person(name, age, *, city, job):
			print(name, age, city, job)
		在使用命名参数后，调用时要写变量名，否则会报错
	
	任何一个函数可以是以上四种参数与必须参数的任意组合，
	但参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数
	如
		def f1(a, b, c=0, *args, **kw):
	或
		def f2(a, b, c=0, *, d, **kw):

2. 递归函数
    为了避免递归溢出，可以采取尾递归，
	即在函数返回的时候，调用自身本身，并且，return语句不能包含运算表达式
    如普通的阶乘计算，递归表达为：
	def fact(n):
		if n==1:
			return 1
		return n * fact(n - 1)	
	采用尾递归，可以优化为如下代码
	def fact(n):
		return fact_iter(n, 1)

	def fact_iter(num, product):
		if num == 1:
			return product
		return fact_iter(num - 1, num * product)

3. 高级特性
	1）切片
		L[start:end:stepsize]，取出左闭右开区间start到end的元素，start默认为0，end默认为size，步长默认为1
		切片也对倒者取元素适用，
		list、tuple和str都支持切片
	2）迭代
		python支持一切可迭代对象的迭代，不一定要下标访问，如字典
		考察对象是否可迭代的方法：
		from collections import Iterable
		
        isinstance(variable_type, Iterable)
		
	3)列表生成式
		即用表达式确定列表元素，如
		[x * x for x in range(1, 11)]
		
		并且，支持两层循环，如：
		[m + n for m in 'ABC' for n in 'XYZ']
		
		甚至调用函数
		[s.lower() for s in L]
		
		并且，列表生成式也支持用if...else，如：
		[x for x in range(1, 11) if x % 2 == 0]
		或
		[x if x % 2 == 0 else -x for x in range(1, 11)]
		即，如果if写在for后，则只能带if，如果写在for前，则要加上else
	
	4）生成器
		如果列表元素可以按照某种算法推算出来，可以在循环的过程中不断推算出后续的元素
		一种简单的方法是类似列表生成式，将[]改为()，如：g = (x * x for x in range(10))
		可通过循环查看元素
		另一种是 通过yield关键字来表明，该函数为生成器，如：
		def fib(max):
			n, a, b = 0, 0, 1
			while n < max:
				yield b #生成器的关键字
				a, b = b, a + b
				n = n + 1
			return 'done'
		yield关键字即告诉编译器，每次执行到yield返回，下一次从yield继续
	
	5）迭代
		可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator
	    注意，list、dic、tuple和字符串都是可迭代的，即可用for循环
		但只有tuple是迭代器，即使用iter()函数，因为迭代器是惰性的，需要才计算。
	
4. 函数式编程
	1）定义
		函数式编程就是一种抽象程度很高的编程范式，纯粹的函数式编程语言编写的函数没有变量
		因此，任意一个函数，只要输入是确定的，输出就是确定的，这种纯函数我们称之为没有副作用
	
	2）高阶函数
		即以函数作为参数的函数，如
		def add(x, y, f):
			return f(x)+f(y)
	
	3)map与reduce
		首先是map，即把函数f作用到后面可迭代的对象，并返回一个列表L
		假设f是x*x的效果，如L =map(f, [1,2,3,4,5])
		
		其次是reduce，同样是f+iterable的形式，不过其要求f必须可接受两个参数，
		因为reduce会把函数返回的结果与下一个元素继续套用函数，如
		reduce(add, [1, 3, 5, 7, 9])
		可对数列求和
		
		如果将map和reduce配合起来，我们可以写一个字符串数字转换为数字的函数
		
		from functools import reduce

		DIGITS = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}

		def str2int(s):
			def fn(x, y):
				return x * 10 + y
			def char2num(s): 
				return DIGITS[s]
			return reduce(fn, map(char2num, s))