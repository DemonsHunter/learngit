# git 学习笔记
一、基本命令

1. 初始化一个仓库，用git init命令

2. 添加文件到Git仓库有两步
	1) git add file_name *可反复多次使用，添加多个文件
	2) git commit -m "message" *用message中的信息说明本次添加的目的、内容、方法等

3. 掌握工作区的状态，用git status命令，如果有修改过，用 git diff file_name 查看修改内容
   修改完成后，用同样的方法添加到仓库

4. git log 命令可以查看对仓库的屡次更改，可以用git log --pretty=oneline进行精简，便于观察

5. HEAD指向的版本是当前分支的最新指针，修改分支相当于修改HEAD的指向，之前的依次为HEAD^,HEAD^^...

二、时光机穿梭

6. 如果想要回退版本，调用命令git reset --hard commit_id 其中，版本号输入前几位即可

7. git reflog可以查看命令历史

8. git的内部可分为工作区和版本区，工作区即本电脑上的目录，可以看到文件
   而版本区包括暂存区stage和分支branch，git默认为我们构建了master的分支，其上有一个目前版本的指针HEAD
   每次修改过的内容，通过add命令从工作区进入暂存区，再通过commit命令，将文件方入目前的分支
   
9. 撤销工作区的修改: git checkout -- file_name
   撤销暂存区的修改：git reset HEAD file_name，再用上一步的命令撤回修改
   撤销暂未推送到远程库的修改：版本回退，即第6步的命令git reset --hard commit_id
   
10. 删除文件：首先用rm file_name，删除工作区文件，或者手动删除也可以
              接下来用git rm file_name命令将文件从版本库中删除，并且用git commit说明
	如果删错了工作区的文件，可以从版本库中找回：git checkout -- file_name，但是该方法只能恢复到最新版本
	可能丢失最近一次提交修改后修改的内容

三、远程仓库

11. 本地修改好的文件，用git push origin master 命令上传到github

12. 克隆仓库命令 git clone git@github.com:user_name/repository_name.git

四、分支管理

13. 基本的分支命令:
	1) 查看分支 git branch
	2) 创建分支 git branch branch_name
	3) 切换分支 git switch branch_name
	4) 创建+切换 git switch -c branch_name
	5) 合并某分支到当前分支 git merge branch_name查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突
	6) 删除分支 git branch -d branch_name

14. 分支冲突：当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

    解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。

    用git log --graph命令可以看到分支合并图。

15. 分支管理：一般master分支是稳定的，不能在上面干活，要另建一个分支如dev，进行工作
    
	其次，每个人新加的内容与dev要采取非快速发送的形式进行连接，以保留原分支的历史信息、开发记录等
	
	命令git merge --no-ff -m "message" branch_name
	
	可以通过命令git log --graph --pretty=oneline --abbrev-commit 查看屡次合并的图形

16. 工作暂存：对于没有完成的工作，可以用git stash命令暂存，要恢复时，可以先用git stash list查看存储的工作现场
    再用git stash pop恢复现场，并删除存档
	
	如果在一个分支上修复了bug，并想对master分支作同步更新，则用git cherry-pick commit_id进行更新
	
17. 查看远程库信息，使用git remote -v；

    本地新建的分支如果不推送到远程，对其他人就是不可见的；

    从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

    在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

    建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

    从远程抓取分支，使用git pull，如果有冲突，要先处理冲突
   

18. 多人工作流程：首先，可以试图用git push origin <branch-name>推送自己的修改；
 
    如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

	如果合并有冲突，则解决冲突，并在本地提交；

	没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功

	如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，
	
	用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

五、标签管理

19. 标签是commit的别名，因为commit是16进制的8位数，难以记忆和管理，因此通过给commit加标签来管理

20. 基本命令：
    1）git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

    2）git tag -a <tagname> -m "blablabla..."可以指定标签信息；

    3）git tag可以查看所有标签。
	
	4）git push origin tagname 可以推送一个本地标签
	
	5）git push origin --tags  可以推送全部未推送过的本地标签
	
	6）git tag -d tagname      可以删除一个本地标签
	
	7）git push origin :refs/tags/tagname 可以删除一个远程标签




























